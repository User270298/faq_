'use client';

import { useState, useEffect, useRef } from 'react';
import { Send, Bot, Sparkles } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import { searchFAQ } from '@/lib/api';
import ApplicationForm from './ApplicationForm';

interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
}

interface FAQChatProps {
  onActivity: () => void;
}

export default function FAQChat({ onActivity }: FAQChatProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showPopularQuestions, setShowPopularQuestions] = useState(true);
  const [showApplicationForm, setShowApplicationForm] = useState(false);
  const [questionCount, setQuestionCount] = useState(0);
  const [showApplicationSuggestion, setShowApplicationSuggestion] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
  const saveMessagesToStorage = (messages: Message[]) => {
    try {
      localStorage.setItem('faq-chat-messages', JSON.stringify(messages));
      localStorage.setItem('faq-chat-question-count', questionCount.toString());
    } catch (error: unknown) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
    }
  };

  const loadMessagesFromStorage = (): Message[] => {
    try {
      const savedMessages = localStorage.getItem('faq-chat-messages');
      const savedQuestionCount = localStorage.getItem('faq-chat-question-count');
      
      if (savedQuestionCount) {
        setQuestionCount(parseInt(savedQuestionCount));
      }
      
      if (savedMessages) {
        const parsedMessages = JSON.parse(savedMessages);
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã Date
        return parsedMessages.map((msg: unknown) => {
          const message = msg as { id: string; type: string; content: string; timestamp: string };
          return {
            ...message,
            timestamp: new Date(message.timestamp)
          };
        });
      }
    } catch (error: unknown) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error);
    }
    return [];
  };



  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ
    const savedMessages = loadMessagesFromStorage();
    
    if (savedMessages.length > 0) {
      setMessages(savedMessages);
    } else {
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      const welcomeMessage: Message = {
        id: 'welcome',
        type: 'bot',
        content: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º –Ω–∏–∂–µ. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –¥–ª—è –≤–∞—Å —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç! ‚ú®',
        timestamp: new Date()
      };
      setMessages([welcomeMessage]);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å—Ä–∞–∑—É
    setShowPopularQuestions(true);
  }, []);

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue.trim(),
      timestamp: new Date()
    };

    const newMessages = [...messages, userMessage];
    setMessages(newMessages);
    setInputValue('');
    setIsLoading(true);
    onActivity();
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    const newQuestionCount = questionCount + 1;
    setQuestionCount(newQuestionCount);

    try {
      let botContent = '';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
      if (isGreeting(inputValue.trim())) {
        botContent = getGreetingResponse();
      } else {
        // –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∏—â–µ–º –≤ FAQ
        const response = await searchFAQ(inputValue.trim());
        
        if (response.data && response.data.faq && response.data.faq.length > 0) {
          const bestMatch = response.data.faq[0];
          botContent = `**${bestMatch.question}**\n\n${bestMatch.answer}`;
        } else {
          botContent = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –æ–¥–Ω–æ–π –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º?';
        }
      }

      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: botContent,
        timestamp: new Date()
      };

      const finalMessages = [...newMessages, botMessage];
      setMessages(finalMessages);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ localStorage
      saveMessagesToStorage(finalMessages);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ 3 –≤–æ–ø—Ä–æ—Å–æ–≤
      if (newQuestionCount >= 3) {
        addApplicationSuggestion();
      }
      
      // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setShowPopularQuestions(false);
      setTimeout(() => {
        setShowPopularQuestions(true);
      }, 12000);
    } catch (error: unknown) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ FAQ:', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.',
        timestamp: new Date()
      };
      const newMessages = [...messages, userMessage, errorMessage];
      setMessages(newMessages);
      saveMessagesToStorage(newMessages);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
  const isGreeting = (text: string): boolean => {
    const greetings = [
      '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', 
      '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', 'hi', 'hello', 'hey', '–¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫'
    ];
    const normalizedText = text.toLowerCase().trim();
    return greetings.some(greeting => normalizedText.includes(greeting));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  const getGreetingResponse = (): string => {
    return '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å? –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º –Ω–∏–∂–µ.';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ –∑–∞—è–≤–∫–µ
  const isApplicationQuestion = (text: string): boolean => {
    const applicationKeywords = [
      '–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', '–∑–∞—è–≤–∫–∞', '–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', '–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', 
      '–∑–∞—è–≤–∫—É', '–∑–∞—è–≤–∫–∏', '–ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏', '—Ñ–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏'
    ];
    const normalizedText = text.toLowerCase().trim();
    return applicationKeywords.some(keyword => normalizedText.includes(keyword));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞—è–≤–∫–∏
  const handleApplicationClick = () => {
    setShowApplicationForm(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
  const handleApplicationSuccess = () => {
    const successMessage: Message = {
      id: (Date.now() + 3).toString(),
      type: 'bot',
      content: '‚úÖ **–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!**\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å!',
      timestamp: new Date()
    };
    const newMessages = [...messages, successMessage];
    setMessages(newMessages);
    saveMessagesToStorage(newMessages);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
  const addApplicationSuggestion = () => {
    if (!showApplicationSuggestion) {
      setShowApplicationSuggestion(true);
      setTimeout(() => {
        const suggestionMessage: Message = {
          id: (Date.now() + 2).toString(),
          type: 'bot',
          content: 'üí° **–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?**\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è, –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤.\n\nüìù **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É:**',
          timestamp: new Date()
        };
        const newMessages = [...messages, suggestionMessage];
        setMessages(newMessages);
        saveMessagesToStorage(newMessages);
      }, 2000);
    }
  };

  const popularQuestions = [
    '–ö–∞–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã —É –≤–∞—Å –µ—Å—Ç—å?',
    '–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É?',
    '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞?',
    '–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã?',
    '–ï—Å—Ç—å –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥?'
  ];

  const handleQuickQuestion = async (question: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: question,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);
    onActivity();
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    const newQuestionCount = questionCount + 1;
    setQuestionCount(newQuestionCount);

    try {
      let botContent = '';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
      if (isGreeting(question)) {
        botContent = getGreetingResponse();
      } else {
        // –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∏—â–µ–º –≤ FAQ
        const response = await searchFAQ(question);
        
        if (response.data && response.data.faq && response.data.faq.length > 0) {
          const bestMatch = response.data.faq[0];
          botContent = `**${bestMatch.question}**\n\n${bestMatch.answer}`;
        } else {
          botContent = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.';
        }
      }

      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: botContent,
        timestamp: new Date()
      };

      const finalMessages = [...messages, userMessage, botMessage];
      setMessages(finalMessages);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ localStorage
      saveMessagesToStorage(finalMessages);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ 3 –≤–æ–ø—Ä–æ—Å–æ–≤
      if (newQuestionCount >= 3) {
        addApplicationSuggestion();
      }
      
      // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setShowPopularQuestions(false);
      setTimeout(() => {
        setShowPopularQuestions(true);
      }, 12000);
    } catch (error: unknown) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ FAQ (quick question):', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        timestamp: new Date()
      };
      const newMessages = [...messages, userMessage, errorMessage];
      setMessages(newMessages);
      saveMessagesToStorage(newMessages);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-full bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-transparent">
        {messages.map((message, index) => (
          <div
            key={message.id}
            className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'} animate-fade-in`}
            style={{ animationDelay: `${index * 0.1}s` }}
          >
            <div
              className={`max-w-[85%] rounded-2xl p-4 shadow-lg transition-all duration-300 hover:shadow-xl ${
                message.type === 'user'
                  ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white'
                  : 'bg-white text-gray-800 border border-gray-100 shadow-xl'
              }`}
            >
                             <div className="flex items-start gap-3">
                 <div className="flex-1">
                  {message.type === 'bot' ? (
                    <div className="prose prose-sm max-w-none">
                      <ReactMarkdown
                        components={{
                          p: ({ children }) => <p className="mb-2 last:mb-0 leading-relaxed">{children}</p>,
                          strong: ({ children }) => <strong className="font-semibold text-purple-700">{children}</strong>,
                          ul: ({ children }) => <ul className="list-disc list-inside mb-2 space-y-1">{children}</ul>,
                          li: ({ children }) => <li className="mb-1">{children}</li>
                        }}
                      >
                        {message.content}
                      </ReactMarkdown>
                      
                      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∑–∞—è–≤–∫–∞—Ö –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π */}
                      {(isApplicationQuestion(message.content) || message.content.includes('–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é')) && (
                        <div className="mt-4">
                          <button
                            onClick={handleApplicationClick}
                            className="bg-gradient-to-r from-green-500 to-green-600 text-white px-6 py-3 rounded-xl hover:from-green-600 hover:to-green-700 transition-all duration-300 shadow-lg hover:shadow-xl font-medium text-sm"
                          >
                            üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
                          </button>
                        </div>
                      )}
                    </div>
                  ) : (
                    <p className="text-sm leading-relaxed">{message.content}</p>
                  )}
                </div>
              </div>
            </div>
          </div>
        ))}
        
        {isLoading && (
          <div className="flex justify-start animate-fade-in">
            <div className="bg-white rounded-2xl p-4 shadow-xl border border-gray-100">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center shadow-lg">
                  <Bot size={16} className="text-white" />
                </div>
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-purple-500 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-purple-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-purple-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Popular Questions */}
      {showPopularQuestions && (
        <div className="p-3 border-t border-gray-200 bg-white bg-opacity-50 backdrop-blur-sm animate-fade-in">
          <div className="flex items-center gap-2 mb-2">
            <Sparkles size={14} className="text-purple-500" />
            <p className="text-xs font-medium text-gray-700">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</p>
          </div>
          <div className="grid grid-cols-1 gap-1">
            {popularQuestions.map((question, index) => (
              <button
                key={index}
                onClick={() => handleQuickQuestion(question)}
                className="text-xs bg-gradient-to-r from-blue-50 to-purple-50 text-blue-700 px-3 py-1.5 rounded-lg hover:from-blue-100 hover:to-purple-100 transition-all duration-300 border border-blue-200 hover:border-blue-300 shadow-sm hover:shadow-md text-left"
              >
                {question}
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Input */}
      <div className="p-4 border-t border-gray-200 bg-white bg-opacity-80 backdrop-blur-sm">
        <div className="flex gap-3">
          <div className="flex-1 relative">
            <input
              ref={inputRef}
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
              className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 bg-white text-gray-900 placeholder-gray-500 shadow-sm hover:shadow-md"
              disabled={isLoading}
            />
            {inputValue && (
              <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
              </div>
            )}
          </div>
          <button
            onClick={handleSendMessage}
            disabled={!inputValue.trim() || isLoading}
            className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-3 rounded-xl hover:from-blue-600 hover:to-purple-700 disabled:from-gray-300 disabled:to-gray-400 disabled:cursor-not-allowed transition-all duration-300 shadow-lg hover:shadow-xl"
          >
            <Send size={18} />
          </button>
        </div>
      </div>

      <style jsx>{`
        @keyframes fade-in {
          from {
            opacity: 0;
            transform: translateY(10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        
        .animate-fade-in {
          animation: fade-in 0.3s ease-out forwards;
        }
        
        .scrollbar-thin::-webkit-scrollbar {
          width: 6px;
        }
        
        .scrollbar-thin::-webkit-scrollbar-track {
          background: transparent;
        }
        
        .scrollbar-thin::-webkit-scrollbar-thumb {
          background: #cbd5e0;
          border-radius: 3px;
        }
        
        .scrollbar-thin::-webkit-scrollbar-thumb:hover {
          background: #a0aec0;
        }
      `}</style>
      
      {/* Application Form Modal */}
      {showApplicationForm && (
        <ApplicationForm 
          onClose={() => setShowApplicationForm(false)} 
          onSuccess={handleApplicationSuccess}
        />
      )}
    </div>
  );
} 