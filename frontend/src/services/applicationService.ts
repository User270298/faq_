import { ApplicationCreate, ApplicationResponse } from '@/types/api';

export class ApplicationService {
  private applications: Array<{
    id: string;
    name: string;
    email: string;
    phone: string;
    selectedTariff: string;
    message?: string;
    created_at: string;
    status: string;
    updated_at?: string;
  }> = [];

  async submitApplication(applicationData: ApplicationCreate): Promise<ApplicationResponse> {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!applicationData.name || !applicationData.email || !applicationData.phone) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(applicationData.email)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/;
      if (!phoneRegex.test(applicationData.phone)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
      const application = {
        id: Date.now().toString(),
        ...applicationData,
        created_at: new Date().toISOString(),
        status: 'new'
      };

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      this.applications.push(application);

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:', application);

      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
      await this.sendNotificationEmail(application);

      return {
        success: true,
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤.',
        application_id: application.id
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:', error);
      return {
        success: false,
        message: error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏'
      };
    }
  }

  private async sendNotificationEmail(application: {
    id: string;
    name: string;
    email: string;
    phone: string;
    selectedTariff: string;
    message?: string;
    created_at: string;
    status: string;
  }): Promise<void> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email:', application.email);
    console.log('üìß –¢–µ–º–∞: –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç', application.name);
    console.log('üìß –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:', {
      name: application.name,
      email: application.email,
      phone: application.phone,
      tariff: application.selectedTariff,
      message: application.message || '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
    });

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email —Å–µ—Ä–≤–∏—Å–æ–º
    // –Ω–∞–ø—Ä–∏–º–µ—Ä, SendGrid, Mailgun, –∏–ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SMTP
  }

  getAllApplications(): Array<{
    id: string;
    name: string;
    email: string;
    phone: string;
    selectedTariff: string;
    message?: string;
    created_at: string;
    status: string;
    updated_at?: string;
  }> {
    return this.applications;
  }

  getApplicationById(id: string): {
    id: string;
    name: string;
    email: string;
    phone: string;
    selectedTariff: string;
    message?: string;
    created_at: string;
    status: string;
    updated_at?: string;
  } | null {
    return this.applications.find(app => app.id === id) || null;
  }

  updateApplicationStatus(id: string, status: string): boolean {
    const application = this.applications.find(app => app.id === id);
    if (application) {
      application.status = status;
      application.updated_at = new Date().toISOString();
      return true;
    }
    return false;
  }
} 