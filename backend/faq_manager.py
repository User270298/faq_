#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FAQ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –∫–æ–¥
"""
import json
import sys
import os
from datetime import datetime
from typing import List, Dict, Optional

class FAQManager:
    def __init__(self, data_file: str = "data/faq.json"):
        self.data_file = data_file
        self.data = self._load_data()
    
    def _load_data(self) -> Dict:
        """Load FAQ data from JSON file"""
        try:
            with open(self.data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {self.data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            sys.exit(1)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
            sys.exit(1)
    
    def _save_data(self):
        """Save FAQ data to JSON file"""
        try:
            # Update metadata
            self.data["metadata"] = {
                "version": "1.0",
                "last_updated": datetime.now().strftime("%Y-%m-%d"),
                "total_questions": len(self.data["faq"]),
                "categories_count": len(self.data["categories"])
            }
            
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def list_questions(self, category: Optional[str] = None):
        """List all questions or by category"""
        questions = self.data["faq"]
        
        if category:
            questions = [q for q in questions if q["category"] == category]
            if not questions:
                print(f"‚ùå –í–æ–ø—Ä–æ—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
        
        print(f"\nüìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ ({len(questions)}):")
        print("-" * 80)
        
        for q in questions:
            print(f"ID: {q['id']}")
            print(f"–í–æ–ø—Ä–æ—Å: {q['question']}")
            print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {q['category']}")
            print(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {q.get('priority', '–ù–µ –∑–∞–¥–∞–Ω')}")
            print(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(q['keywords'])}")
            print("-" * 80)
    
    def add_question(self):
        """Add new question interactively"""
        print("\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        print("-" * 40)
        
        # Get question details
        question = input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å: ").strip()
        if not question:
            print("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        answer = input("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç: ").strip()
        if not answer:
            print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        # Show available categories
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        for key, value in self.data["categories"].items():
            print(f"  {key}: {value}")
        
        category = input("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ").strip()
        if category not in self.data["categories"]:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è!")
            return
        
        keywords_input = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").strip()
        keywords = [kw.strip() for kw in keywords_input.split(",") if kw.strip()]
        
        priority_input = input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—á–∏—Å–ª–æ, Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        priority = int(priority_input) if priority_input.isdigit() else len(self.data["faq"]) + 1
        
        # Generate new ID
        new_id = max([q["id"] for q in self.data["faq"]]) + 1 if self.data["faq"] else 1
        
        # Create new question
        new_question = {
            "id": new_id,
            "question": question,
            "answer": answer,
            "keywords": keywords,
            "category": category,
            "priority": priority,
            "created_at": datetime.now().strftime("%Y-%m-%d"),
            "updated_at": datetime.now().strftime("%Y-%m-%d")
        }
        
        self.data["faq"].append(new_question)
        self._save_data()
        print(f"‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {new_id}")
    
    def edit_question(self, question_id: int):
        """Edit existing question"""
        question = next((q for q in self.data["faq"] if q["id"] == question_id), None)
        if not question:
            print(f"‚ùå –í–æ–ø—Ä–æ—Å —Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        print(f"\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ID: {question_id}")
        print("-" * 40)
        print(f"–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {question['question']}")
        
        # Get new values
        new_question = input("–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if new_question:
            question["question"] = new_question
        
        new_answer = input("–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if new_answer:
            question["answer"] = new_answer
        
        # Show categories
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        for key, value in self.data["categories"].items():
            print(f"  {key}: {value}")
        
        new_category = input("–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if new_category:
            if new_category not in self.data["categories"]:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è!")
                return
            question["category"] = new_category
        
        new_keywords = input("–ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if new_keywords:
            question["keywords"] = [kw.strip() for kw in new_keywords.split(",") if kw.strip()]
        
        new_priority = input("–ù–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—á–∏—Å–ª–æ, Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if new_priority.isdigit():
            question["priority"] = int(new_priority)
        
        question["updated_at"] = datetime.now().strftime("%Y-%m-%d")
        self._save_data()
        print("‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
    
    def delete_question(self, question_id: int):
        """Delete question"""
        question = next((q for q in self.data["faq"] if q["id"] == question_id), None)
        if not question:
            print(f"‚ùå –í–æ–ø—Ä–æ—Å —Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        print(f"\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ID: {question_id}")
        print(f"–í–æ–ø—Ä–æ—Å: {question['question']}")
        
        confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): ").strip().lower()
        if confirm == 'y':
            self.data["faq"] = [q for q in self.data["faq"] if q["id"] != question_id]
            self._save_data()
            print("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!")
        else:
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    def show_stats(self):
        """Show FAQ statistics"""
        questions = self.data["faq"]
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FAQ")
        print("-" * 40)
        print(f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        
        # Count by category
        category_count = {}
        for q in questions:
            category = q["category"]
            category_count[category] = category_count.get(category, 0) + 1
        
        print("\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, count in category_count.items():
            category_name = self.data["categories"].get(category, category)
            print(f"  {category_name}: {count}")
        
        # Popular keywords
        all_keywords = []
        for q in questions:
            all_keywords.extend(q["keywords"])
        
        keyword_count = {}
        for keyword in all_keywords:
            keyword_count[keyword] = keyword_count.get(keyword, 0) + 1
        
        popular_keywords = sorted(keyword_count.items(), key=lambda x: x[1], reverse=True)[:5]
        
        print("\n–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:")
        for keyword, count in popular_keywords:
            print(f"  {keyword}: {count}")

def main():
    if len(sys.argv) < 2:
        print("""
üîß FAQ Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python faq_manager.py <–∫–æ–º–∞–Ω–¥–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]

–ö–æ–º–∞–Ω–¥—ã:
  list [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]     - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  add                  - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
  edit <id>           - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ ID
  delete <id>         - –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ ID
  stats               - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  help                - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  python faq_manager.py list
  python faq_manager.py list pricing
  python faq_manager.py add
  python faq_manager.py edit 1
  python faq_manager.py delete 1
  python faq_manager.py stats
        """)
        return
    
    manager = FAQManager()
    command = sys.argv[1].lower()
    
    if command == "list":
        category = sys.argv[2] if len(sys.argv) > 2 else None
        manager.list_questions(category)
    
    elif command == "add":
        manager.add_question()
    
    elif command == "edit":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        try:
            question_id = int(sys.argv[2])
            manager.edit_question(question_id)
        except ValueError:
            print("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    
    elif command == "delete":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
        try:
            question_id = int(sys.argv[2])
            manager.delete_question(question_id)
        except ValueError:
            print("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    
    elif command == "stats":
        manager.show_stats()
    
    elif command == "help":
        main()
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'python faq_manager.py help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

if __name__ == "__main__":
    main() 